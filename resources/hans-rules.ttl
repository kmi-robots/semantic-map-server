@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix hsf: <http://data.open.ac.uk/kmi/hans#> .
@prefix ros: <http://data.open.ac.uk/kmi/ros#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix geof: <http://www.opengis.net/def/function/geosparql/> .

# SHACL RULES FOR HEALT&SAFETY RULES
# ELECTRIC HEATER FREE AREAS
# rule asserting that no Electric Heater should be present in
# heater free areas
hsf:heaterFreeAreaRule a sh:RuleNodeShape;
  sh:targetClass hsf:HeaterFreeArea ;
  sh:description "Rule checking whether there are electric heaters in electric heaters free area";
  rdfs:comment "Electric heaters are not allowed in this area";
  sh:sparql [
   a          sh:SPARQLConstraint ;
   sh:message "{?hname} can't be in {?name}";
   sh:prefixes [
     sh:declare [
                sh:prefix    "schema" ;
                sh:namespace "http://schema.org/"^^xsd:anyURI ;
        ];
     sh:declare [

                sh:prefix "hsf" ;
                sh:namespace "http://data.open.ac.uk/kmi/hans#"^^xsd:anyURI ; 
        ]
   ] ;
   sh:select
    """
    	SELECT $this ?hname ?name
         WHERE {
         ?heater  a hsf:Heater .
         ?heater  schema:name ?hname .
         $this  schema:name ?name .
         FILTER(hsf:contains($this, ?heater))
    }""" ;
 ] .

sh:RuleNodeShape rdfs:subClassOf sh:NodeShape .

# FIRE EXIT POINTS
# rule asserting that every emergency exit should have a
# fire action notice in the surrounding area (fire exit point
# is represented as an area)
hsf:fireActionNoticeRule a sh:RuleNodeShape;
  sh:targetClass hsf:FireExitPoint ;
  sh:description "Rule checking whether fire exit points are provided with fire action notices";
  rdfs:comment "A fire action notice must be present in this area";
  sh:sparql [
   a          sh:SPARQLConstraint ;
   sh:message "{?name} has no fire action notice";
   sh:prefixes [
     sh:declare [
                sh:prefix "hsf" ;
                sh:namespace "http://data.open.ac.uk/kmi/hans#"^^xsd:anyURI ; 
        ];
     sh:declare [
                sh:prefix    "schema" ;
                sh:namespace "http://schema.org/"^^xsd:anyURI ;
        ]
   ] ;
   sh:select
    """
    		SELECT $this ?name WHERE {
		 		$this schema:name ?name .
		 		FILTER NOT EXISTS {
		 		  ?signal a hsf:FireActionNotice .
				  FILTER(hsf:contains($this, ?signal))
		 		}
		}""" ;
 ] .

# FIRE EXTINGUISHER LABELS
# rule asserting that every fire extinguisher should have a clear
# label in the nearby (fire extinguishers are represented as points)
hsf:fireExtinguisherLabelRule a sh:RuleNodeShape;
  sh:targetClass hsf:FireExtinguisher ;
  sh:description "Rule checking whether fire extinguishers are properly labelled";
  rdfs:comment "A label must be present near this fire extinguisher";
  sh:sparql [
   a          sh:SPARQLConstraint ;
   sh:message "{?name} has no label nearby";
   sh:prefixes [
     sh:declare [
                sh:prefix "hsf" ;
                sh:namespace "http://data.open.ac.uk/kmi/hans#"^^xsd:anyURI ; 
        ];
     sh:declare [
                sh:prefix    "schema" ;
                sh:namespace "http://schema.org/"^^xsd:anyURI ;
        ];
   ] ;
   sh:select
    """
    	SELECT $this ?name WHERE {
		 	$this schema:name ?name .
		 	FILTER NOT EXISTS {
		 		?fel a hsf:FireExtinguisherLabel . 
				FILTER(hsf:distance($this, ?fel) < 2)
		 	}
		}""" ;
 ] .